import { Component, ElementRef, OnInit, OnDestroy, ViewChild, HostListener } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ThreeService } from '../../services/three.service';
import { SimpleLight } from '../../services/three.service';
import { ColorService } from '../../services/color.service';
import { NavbarEffectsService } from '../../services/navbar-effects.service';
import { NavbarThreeService } from '../../services/navbar-three.service';
import { Observable, Subscription } from 'rxjs';
import { FormsModule } from '@angular/forms';
import { trigger, transition, style, animate } from '@angular/animations';

@Component({
  selector: 'app-navbar',
  standalone: true,
  imports: [CommonModule, FormsModule],  
  
  template: `    <nav class="navbar navbar-expand-lg navbar-dark fixed-top px-3"
         [class.shrink-navbar]="isShrunk$ | async"
         [class.large-navbar]="!(isShrunk$ | async)"
         (click)="toggleNavbar($event)">
      <div class="canvas-container">
        <canvas #threeNavbarCanvas class="navbar-canvas"></canvas>
      </div>

      <!-- Panneau de contrôle des lumières -->
      <div class="light-settings-panel" [class.show]="isLightControlsOpen">
        <div class="panel-header">
          <h6 class="text-white mb-0">Paramètres d'éclairage</h6>          <div class="tab-selector">
            <button class="tab-button" 
                   [class.active]="activeTab === 'navbar'"
                   (click)="setActiveTab('navbar')">
              Navbar
            </button>
            <button class="tab-button" 
                   [class.active]="activeTab === 'background'"
                   (click)="setActiveTab('background')">
              Fond
            </button>
          </div>          <button class="btn-close-panel" (click)="toggleLightControls($event)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="panel-content">          <div class="light-control" *ngFor="let light of filteredLights">
            <div class="light-header">
              <label class="text-white d-flex align-items-center">
                <img [src]="getLightIcon(light.type)" class="light-icon me-2" alt="{{ light.name }}" />
                {{ light.name }}
              </label>
              <div class="light-actions">
                <input type="color" 
                       class="form-control form-control-color btn-icon"
                       [value]="light.color"
                       (input)="onLightColorChangeRealtime(light.name, $event)"
                       [title]="'Couleur de ' + light.name"><button class="btn-toggle" 
                        [class.active]="light.enabled"
                        (click)="toggleLight(light.name)">
                  <i class="fas" [class.fa-eye]="light.enabled" [class.fa-eye-slash]="!light.enabled"></i>
                </button>
              </div>
            </div>
            <div class="light-controls">
              <input type="range" 
                     class="form-range light-slider" 
                     [min]="0" 
                     [max]="light.type === 'DirectionalLight' ? 1.5 : 1" 
                     step="0.05" 
                     [value]="light.intensity"
                     (input)="onLightIntensityChange(light.name, $event)">
              <input type="number" 
                     class="form-control form-control-sm intensity-input" 
                     [value]="light.intensity"
                     [min]="0" 
                     [max]="light.type === 'DirectionalLight' ? 1.5 : 1"
                     step="0.05"
                     (input)="onLightIntensityChange(light.name, $event)">
            </div>
          </div>
        </div>
      </div>
      
      <div class="navbar-brand-section">
        <div class="d-flex align-items-center">          <button class="btn btn-icon me-2" 
                  (click)="toggleLightControls($event)"
                  title="Contrôles d'éclairage">
            <img src="assets/img/brands/logo site.png" alt="Paramètres" class="logo-settings" />
          </button>
          <span class="navbar-brand">Lucas Bonneau</span>
        </div>
      </div>

      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navMenu">
        <span class="navbar-toggler-icon"></span>
      </button>      <div class="collapse navbar-collapse" id="navMenu">
        <ul class="navbar-nav ms-auto align-items-center">          <li class="nav-item me-3">
            <a class="nav-link" 
               href="#about" 
               (click)="onNavLinkClick($event, 'about')">À propos</a>
          </li>
          <li class="nav-item me-3">
            <a class="nav-link" 
               href="#skills" 
               (click)="onNavLinkClick($event, 'skills')">Compétences</a>
          </li>
          <li class="nav-item me-3">
            <a class="nav-link" 
               href="#contact" 
               (click)="onNavLinkClick($event, 'contact')">Contact</a>
          </li>
          <li class="nav-item ms-4">
            <button class="btn btn-outline-light" 
                    (click)="downloadCV($event)">
              Télécharger CV
            </button>
          </li>
        </ul>
      </div>

      <div class="scroll-indicator" [class.hidden]="isShrunk$ | async">
        <div class="scroll-text">Scroll</div>
        <div class="scroll-arrow"></div>
      </div>
    </nav>
  `,
  styles: [],
  styleUrls: ['./navbar.component.css']
})
export class NavbarComponent implements OnInit, OnDestroy {
  @ViewChild('threeNavbarCanvas') navbarCanvas!: ElementRef<HTMLCanvasElement>;
  isLightControlsOpen = false;
  currentColor$: Observable<string>;
  lights: SimpleLight[] = []; // Utiliser SimpleLight au lieu de any[]
  filteredLights: SimpleLight[] = [];
  private subscriptions: Subscription[] = [];
  
  // Les anciennes propriétés sont conservées pour la rétrocompatibilité
  // mais ne sont plus directement utilisées
  ambientLightIntensity = 0.4; // Initialisation à 0.4 comme demandé
  directionalLightIntensity = 0.05; // Initialisation à 0.05 comme demandé
  pointLightIntensity = 0.3;
  backgroundLightIntensity = 0.5;

  ambientLightColor = '#ffffff';
  directionalLightColor = '#ffffff';
  pointLightColor = '#ffffff';
  backgroundLightColor = '#ffffff';

  colorOptions: any[];  
  cvAvailable = false;
  isShrunk$: Observable<boolean>;
  private mouseX = 0;
  private mouseY = 0;
  private currentShrinkState = true; // Cache pour l'état actuel

  showLightSettings: boolean = false;
  activeTab: 'navbar' | 'background' = 'navbar';
  
  // Définition des valeurs d'initialisation des lumières spécifiques
  private initialLightValues = {
    'Lumière ambiante': 0.4,
    'Lumière directionnelle': 0.05,
    'SpotBD': 0.5,
    'SpotHD': 20.0,
    'Spotprincipal': 100.0, 
    'Spotrouge': 1000.0,
    'Sun': 0.9
  };

  constructor(
    private threeService: ThreeService,
    private colorService: ColorService,
    private navbarEffects: NavbarEffectsService,
    private navbarThreeService: NavbarThreeService
  ) {
    this.currentColor$ = this.threeService.getCurrentColor();
    this.colorOptions = this.colorService.getColorOptions();
    this.isShrunk$ = this.navbarEffects.isShrunk$;
    
    fetch('assets/cv.pdf')
      .then(response => {
        this.cvAvailable = response.ok;
      })
      .catch(() => {
        this.cvAvailable = false;
      });
  }

  /**
   * Initialisation du composant
   */
  ngOnInit(): void {
    // Ajouter l'écouteur de mouvement de la souris
    window.addEventListener('mousemove', this.handleMouseMove.bind(this));

    // S'abonner aux changements d'état de la navbar
    this.subscriptions.push(
      this.navbarEffects.isShrunk$.subscribe(isShrunk => {
        this.currentShrinkState = isShrunk;
        if (isShrunk && this.isLightControlsOpen) {
          this.isLightControlsOpen = false;
        }
      })
    );

    // Obtenir les lumières et s'abonner aux mises à jour
    this.threeService.getLights().subscribe((lights: SimpleLight[]) => {
      this.lights = lights;
    });

    this.threeService.getLightsByScene(this.activeTab).subscribe((lights: SimpleLight[]) => {
      this.filteredLights = lights;
    });
  }

  ngAfterViewInit() {
    this.threeService.initNavbar(this.navbarCanvas.nativeElement);
    // Appeler onResize une fois au démarrage pour gérer la largeur initiale
    this.threeService.onResize();
    
    // Charger la liste initiale des lumières
    this.updateLightsList();
    
    // Initialiser les lumières avec les valeurs par défaut
    this.initializeLights();
      
    // S'abonner aux changements de lumières
    this.subscriptions.push(
      this.threeService.getLights().subscribe((lights: SimpleLight[]) => {
        this.lights = lights;
      })
    );
  }
  
  /**
   * Initialise les lumières avec les valeurs prédéfinies
   */
  private initializeLights(): void {
    // Attendre un peu pour s'assurer que toutes les lumières sont chargées
    setTimeout(() => {
      // Pour chaque lumière dans notre liste d'initialisation
      Object.entries(this.initialLightValues).forEach(([lightName, intensity]) => {
        // Trouver la lumière correspondante
        const light = this.lights.find(l => l.name === lightName);
        if (light) {
          // Définir l'intensité et s'assurer que la lumière est activée
          this.threeService.setLightIntensity(lightName, intensity);
          this.threeService.setLightVisibility(lightName, true);
          
          // Mettre à jour la valeur locale si c'est une des lumières principales
          switch (lightName) {
            case 'Lumière ambiante':
              this.ambientLightIntensity = intensity;
              break;
            case 'Lumière directionnelle':
              this.directionalLightIntensity = intensity;
              break;
            case 'Lumière ponctuelle':
              this.pointLightIntensity = intensity;
              break;
            case 'Lumière de fond':
              this.backgroundLightIntensity = intensity;
              break;
          }
        }
      });
      
      console.log('Lumières initialisées avec les valeurs par défaut');
    }, 500); // Délai pour s'assurer que toutes les lumières sont chargées
  }

  ngOnDestroy() {
    // Nettoyage des ressources Three.js
    this.threeService.dispose();
    window.removeEventListener('mousemove', this.handleMouseMove.bind(this));
    this.subscriptions.forEach(sub => sub.unsubscribe());
  }

  private handleMouseMove(event: MouseEvent) {
    // Calculer la position relative de la souris (-1 à 1)
    this.mouseX = (event.clientX / window.innerWidth) * 2 - 1;
    this.mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
    
    // Mettre à jour la rotation du modèle
    this.threeService.updateMousePosition(this.mouseX, this.mouseY);
  }

  changeColor(event: Event) {
    const input = event.target as HTMLInputElement;
    this.threeService.setCurrentColor(input.value);
  }
  
  /**
   * Gère le clic sur les liens de navigation (version optimisée)
   */
  onNavLinkClick(event: Event, targetId: string) {
    event.preventDefault();
    event.stopPropagation();
    
    // Utiliser le cache au lieu d'une subscription
    const wasExpanded = !this.currentShrinkState;
    
    // Si la navbar est grande, la réduire
    if (wasExpanded) {
      this.navbarEffects.setNavbarState(true);
    }
    
    // Navigation vers la section avec un délai optimisé
    const delay = wasExpanded ? 300 : 0;
    setTimeout(() => {
      this.navigateToSection(targetId);
    }, delay);
  }

  /**
   * Navigation vers une section spécifique
   */
  private navigateToSection(targetId: string) {
    const element = document.getElementById(targetId);
    if (element) {
      element.scrollIntoView({ 
        behavior: 'smooth',
        block: 'start'
      });
    }
  }
  
  downloadCV(event?: Event) {
    // Empêcher la propagation pour éviter l'agrandissement de la navbar
    if (event) {
      event.stopPropagation();
    }
    
    if (this.cvAvailable) {
      window.open('assets/CV_Bonneau_Lucas.pdf', '_blank');
    }
  }

  onAmbientLightChange(event: Event) {
    const input = event.target as HTMLInputElement;
    this.ambientLightIntensity = parseFloat(input.value);
    this.threeService.setAmbientLightIntensity(this.ambientLightIntensity);
  }

  onDirectionalLightChange(event: Event) {
    const input = event.target as HTMLInputElement;
    this.directionalLightIntensity = parseFloat(input.value);
    this.threeService.setDirectionalLightIntensity(this.directionalLightIntensity);
  }

  onPointLightChange(event: Event) {
    const input = event.target as HTMLInputElement;
    this.pointLightIntensity = parseFloat(input.value);
    this.threeService.setPointLightIntensity(this.pointLightIntensity);
  }

  onBackgroundLightChange(event: Event) {
    const input = event.target as HTMLInputElement;
    this.backgroundLightIntensity = parseFloat(input.value);
    this.threeService.setBackgroundLightIntensity(this.backgroundLightIntensity);
  }

  // Méthodes pour les inputs numériques
  onAmbientLightIntensityInputChange(event: Event) {
    const input = event.target as HTMLInputElement;
    this.ambientLightIntensity = parseFloat(input.value);
    this.threeService.setAmbientLightIntensity(this.ambientLightIntensity);
  }

  onDirectionalLightIntensityInputChange(event: Event) {
    const input = event.target as HTMLInputElement;
    this.directionalLightIntensity = parseFloat(input.value);
    this.threeService.setDirectionalLightIntensity(this.directionalLightIntensity);
  }

  onPointLightIntensityInputChange(event: Event) {
    const input = event.target as HTMLInputElement;
    this.pointLightIntensity = parseFloat(input.value);
    this.threeService.setPointLightIntensity(this.pointLightIntensity);
  }

  onBackgroundLightIntensityInputChange(event: Event) {
    const input = event.target as HTMLInputElement;
    this.backgroundLightIntensity = parseFloat(input.value);
    this.threeService.setBackgroundLightIntensity(this.backgroundLightIntensity);
  }

  // Méthodes pour les changements de couleur
  onAmbientLightColorChange(event: Event) {
    const input = event.target as HTMLInputElement;
    this.ambientLightColor = input.value;
    this.threeService.setAmbientLightColor(this.ambientLightColor);
  }

  onDirectionalLightColorChange(event: Event) {
    const input = event.target as HTMLInputElement;
    this.directionalLightColor = input.value;
    this.threeService.setDirectionalLightColor(this.directionalLightColor);
  }

  onPointLightColorChange(event: Event) {
    const input = event.target as HTMLInputElement;
    this.pointLightColor = input.value;
    this.threeService.setPointLightColor(this.pointLightColor);
  }

  onBackgroundLightColorChange(event: Event) {
    const input = event.target as HTMLInputElement;
    this.backgroundLightColor = input.value;
    this.threeService.setBackgroundLightColor(this.backgroundLightColor);
  }
  
  toggleLightControls(event: Event) {
    // Prevent event bubbling to avoid triggering navbar toggle
    event.stopPropagation();
    
    this.isLightControlsOpen = !this.isLightControlsOpen;
    if (this.isLightControlsOpen) {
      this.updateLightsList();
      this.navbarEffects.setNavbarState(false);  // Expand navbar
    } else {
      this.navbarEffects.setNavbarState(true);   // Shrink navbar
    }
  }
  
  updateLightsList() {
    // Subscribe to the Observable to get the actual lights array
    this.threeService.getAllLights().subscribe(lights => {
      this.lights = lights;
      
      // Mettre à jour les propriétés pour la rétrocompatibilité
      const ambientLight = this.lights.find(l => l.name === 'Lumière ambiante');
      if (ambientLight) {
        this.ambientLightIntensity = ambientLight.intensity;
        this.ambientLightColor = ambientLight.color;
      }
      
      const directionalLight = this.lights.find(l => l.name === 'Lumière directionnelle');
      if (directionalLight) {
        this.directionalLightIntensity = directionalLight.intensity;
        this.directionalLightColor = directionalLight.color;
      }
      
      const pointLight = this.lights.find(l => l.name === 'Lumière ponctuelle');
      if (pointLight) {
        this.pointLightIntensity = pointLight.intensity;
        this.pointLightColor = pointLight.color;
      }
      
      const backgroundLight = this.lights.find(l => l.name === 'Lumière de fond');
      if (backgroundLight) {
        this.backgroundLightIntensity = backgroundLight.intensity;
        this.backgroundLightColor = backgroundLight.color;
      }
    });
  }
  
  /**
   * Change d'onglet et actualise les lumières
   * @param tab Onglet à activer ('navbar' ou 'background')
   */
  setActiveTab(tab: 'navbar' | 'background') {
    this.activeTab = tab;
    this.threeService.setActiveTab(tab);
    
    // Update filtered lights based on the new active tab
    this.threeService.getLightsByScene(tab).subscribe(lights => {
      this.filteredLights = lights;
    });
  }
  
  /**
   * Modifie l'intensité d'une lumière
   * @param lightName Nom de la lumière
   * @param event Événement d'input
   */
  onLightIntensityChange(lightName: string, event: Event): void {
    const intensity = parseFloat((event.target as HTMLInputElement).value);
    
    // Utiliser NavbarThreeService pour les lumières de la navbar
    this.navbarThreeService.updateLightIntensity(lightName, intensity);
    
    // Mettre à jour les propriétés de rétrocompatibilité
    switch (lightName) {
      case 'Lumière ambiante':
        this.ambientLightIntensity = intensity;
        break;
      case 'Lumière directionnelle':
        this.directionalLightIntensity = intensity;
        break;
      case 'Lumière ponctuelle':
        this.pointLightIntensity = intensity;
        break;
      case 'Lumière de fond':
        this.backgroundLightIntensity = intensity;
        break;
    }
  }
  
  /**
   * Met à jour la couleur d'une lumière en temps réel
   */
  onLightColorChangeRealtime(lightName: string, event: Event): void {
    const color = (event.target as HTMLInputElement).value;
    this.navbarThreeService.updateLightColor(lightName, color);
  }
  
  /**
   * Active ou désactive une lumière
   * @param lightName Nom de la lumière
   */
  toggleLight(lightName: string): void {
    this.navbarThreeService.toggleLight(lightName);
  }
  
  /**
   * Méthode pour obtenir l'icône ou l'image en fonction du type de lumière
   */
  getLightIcon(type: string): string {
    switch (type) {
      case 'AmbientLight':
        return 'assets/img/brands/logo ambient.png'; // Image pour lumière ambiante
      case 'DirectionalLight':
        return 'assets/img/brands/logo direct.png';  // Image pour lumière directionnelle
      case 'PointLight':
        return 'assets/img/brands/logo site2.png';   // Image pour lumière ponctuelle
      case 'SpotLight':
        return 'assets/img/brands/logo spotlight-clear.png'; // Image pour spotlight
      case 'HemisphereLight':
        return 'assets/img/brands/logo sun.png';     // Image pour hemisphère
      case 'RectAreaLight':
        return 'assets/img/brands/logo site.png';    // Image générique pour autres lumières
      default:
        return 'assets/img/brands/logo site.png';    // Image par défaut
    }
  }
  
  @HostListener('document:click', ['$event'])
  handleClickOutside(event: Event) {
    const target = event.target as HTMLElement;
    const panel = document.querySelector('.light-settings-panel');
    const toggleButton = document.querySelector('.btn-icon img.logo-settings');

    // Only close panel if clicking outside panel and not on the toggle button
    if (panel && !panel.contains(target) && 
        toggleButton && !toggleButton.contains(target) && 
        !target.closest('.btn-icon')) {
      this.isLightControlsOpen = false;
      // Don't auto-shrink navbar when closing panel by clicking elsewhere
    }
  }
  
  /**
   * Toggle navbar between expanded and shrunk states avec gestion optimisée des clics
   */
  toggleNavbar(event: Event): void {
    const target = event.target as HTMLElement;
    
    // Tableau des sélecteurs qui empêchent le toggle
    const preventToggleSelectors = [
      '.light-settings-panel',
      '.btn-icon',
      '.navbar-brand-section',
      '.nav-link',
      '.btn-outline-light',
      '.navbar-nav',
      '.navbar-toggler'
    ];
    
    // Vérifier si le clic est sur un élément qui doit empêcher le toggle
    const shouldPreventToggle = preventToggleSelectors.some(selector => 
      target.closest(selector)
    );
    
    if (shouldPreventToggle) {
      return;
    }
    
    // Faire le toggle seulement si aucun élément bloquant n'est cliqué
    this.navbarEffects.toggleNavbar();
  }
}
